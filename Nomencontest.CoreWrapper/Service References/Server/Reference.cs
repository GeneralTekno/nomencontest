//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Nomencontest.Core.Wrapper.Server {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Server.ICore", CallbackContract=typeof(Nomencontest.Core.Wrapper.Server.ICoreCallback))]
    public interface ICore {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICore/RegisterAdministrator", ReplyAction="http://tempuri.org/ICore/RegisterAdministratorResponse")]
        uint RegisterAdministrator(string adminGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICore/RegisterAdministrator", ReplyAction="http://tempuri.org/ICore/RegisterAdministratorResponse")]
        System.Threading.Tasks.Task<uint> RegisterAdministratorAsync(string adminGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICore/UnregisterAdministrator", ReplyAction="http://tempuri.org/ICore/UnregisterAdministratorResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.SetupTransporter))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.GameStatus))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.ItemDatabaseTransporter))]
        void UnregisterAdministrator(Nomencontest.Base.DataTransporter clientData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICore/UnregisterAdministrator", ReplyAction="http://tempuri.org/ICore/UnregisterAdministratorResponse")]
        System.Threading.Tasks.Task UnregisterAdministratorAsync(Nomencontest.Base.DataTransporter clientData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICore/RegisterPlayer", ReplyAction="http://tempuri.org/ICore/RegisterPlayerResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.SetupTransporter))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.GameStatus))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.ItemDatabaseTransporter))]
        uint RegisterPlayer(Nomencontest.Base.DataTransporter clientData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICore/RegisterPlayer", ReplyAction="http://tempuri.org/ICore/RegisterPlayerResponse")]
        System.Threading.Tasks.Task<uint> RegisterPlayerAsync(Nomencontest.Base.DataTransporter clientData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICore/UnregisterPlayer", ReplyAction="http://tempuri.org/ICore/UnregisterPlayerResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.SetupTransporter))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.GameStatus))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.ItemDatabaseTransporter))]
        void UnregisterPlayer(Nomencontest.Base.DataTransporter clientData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICore/UnregisterPlayer", ReplyAction="http://tempuri.org/ICore/UnregisterPlayerResponse")]
        System.Threading.Tasks.Task UnregisterPlayerAsync(Nomencontest.Base.DataTransporter clientData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICore/RegisterMainGUI", ReplyAction="http://tempuri.org/ICore/RegisterMainGUIResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.SetupTransporter))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.GameStatus))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.ItemDatabaseTransporter))]
        uint RegisterMainGUI(Nomencontest.Base.DataTransporter clientData, string adminGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICore/RegisterMainGUI", ReplyAction="http://tempuri.org/ICore/RegisterMainGUIResponse")]
        System.Threading.Tasks.Task<uint> RegisterMainGUIAsync(Nomencontest.Base.DataTransporter clientData, string adminGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICore/UnregisterMainGUI", ReplyAction="http://tempuri.org/ICore/UnregisterMainGUIResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.SetupTransporter))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.GameStatus))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.ItemDatabaseTransporter))]
        void UnregisterMainGUI(Nomencontest.Base.DataTransporter clientData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICore/UnregisterMainGUI", ReplyAction="http://tempuri.org/ICore/UnregisterMainGUIResponse")]
        System.Threading.Tasks.Task UnregisterMainGUIAsync(Nomencontest.Base.DataTransporter clientData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICore/RegisterObserver", ReplyAction="http://tempuri.org/ICore/RegisterObserverResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.SetupTransporter))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.GameStatus))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.ItemDatabaseTransporter))]
        uint RegisterObserver(Nomencontest.Base.DataTransporter clientData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICore/RegisterObserver", ReplyAction="http://tempuri.org/ICore/RegisterObserverResponse")]
        System.Threading.Tasks.Task<uint> RegisterObserverAsync(Nomencontest.Base.DataTransporter clientData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICore/UnregisterObserver", ReplyAction="http://tempuri.org/ICore/UnregisterObserverResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.SetupTransporter))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.GameStatus))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.ItemDatabaseTransporter))]
        void UnregisterObserver(Nomencontest.Base.DataTransporter clientData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICore/UnregisterObserver", ReplyAction="http://tempuri.org/ICore/UnregisterObserverResponse")]
        System.Threading.Tasks.Task UnregisterObserverAsync(Nomencontest.Base.DataTransporter clientData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/GetGameData")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.SetupTransporter))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.GameStatus))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.ItemDatabaseTransporter))]
        void GetGameData(Nomencontest.Base.DataTransporter clientData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/GetGameData")]
        System.Threading.Tasks.Task GetGameDataAsync(Nomencontest.Base.DataTransporter clientData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/SetSettings")]
        void SetSettings(Nomencontest.Base.SetupTransporter settings);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/SetSettings")]
        System.Threading.Tasks.Task SetSettingsAsync(Nomencontest.Base.SetupTransporter settings);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/AddItemDatabase")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.SetupTransporter))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.GameStatus))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.ItemDatabaseTransporter))]
        void AddItemDatabase(Nomencontest.Base.DataTransporter data, byte[] itemFile);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/AddItemDatabase")]
        System.Threading.Tasks.Task AddItemDatabaseAsync(Nomencontest.Base.DataTransporter data, byte[] itemFile);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/ClearItemDatabase")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.SetupTransporter))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.GameStatus))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.ItemDatabaseTransporter))]
        void ClearItemDatabase(Nomencontest.Base.DataTransporter data);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/ClearItemDatabase")]
        System.Threading.Tasks.Task ClearItemDatabaseAsync(Nomencontest.Base.DataTransporter data);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/RemoveItem")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.SetupTransporter))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.GameStatus))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.ItemDatabaseTransporter))]
        void RemoveItem(Nomencontest.Base.DataTransporter data, uint itemID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/RemoveItem")]
        System.Threading.Tasks.Task RemoveItemAsync(Nomencontest.Base.DataTransporter data, uint itemID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/GetItems")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.SetupTransporter))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.GameStatus))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.ItemDatabaseTransporter))]
        void GetItems(Nomencontest.Base.DataTransporter data);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/GetItems")]
        System.Threading.Tasks.Task GetItemsAsync(Nomencontest.Base.DataTransporter data);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/ShuffleCategoryItems")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.SetupTransporter))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.GameStatus))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.ItemDatabaseTransporter))]
        void ShuffleCategoryItems(Nomencontest.Base.DataTransporter data, uint categoryID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/ShuffleCategoryItems")]
        System.Threading.Tasks.Task ShuffleCategoryItemsAsync(Nomencontest.Base.DataTransporter data, uint categoryID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/EnableShuffle")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.SetupTransporter))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.GameStatus))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.ItemDatabaseTransporter))]
        void EnableShuffle(Nomencontest.Base.DataTransporter data, bool value);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/EnableShuffle")]
        System.Threading.Tasks.Task EnableShuffleAsync(Nomencontest.Base.DataTransporter data, bool value);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/SetCurrentPlayer")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.SetupTransporter))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.GameStatus))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.ItemDatabaseTransporter))]
        void SetCurrentPlayer(Nomencontest.Base.DataTransporter clientData, uint playerID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/SetCurrentPlayer")]
        System.Threading.Tasks.Task SetCurrentPlayerAsync(Nomencontest.Base.DataTransporter clientData, uint playerID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/ResetRound")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.SetupTransporter))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.GameStatus))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.ItemDatabaseTransporter))]
        void ResetRound(Nomencontest.Base.DataTransporter clientData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/ResetRound")]
        System.Threading.Tasks.Task ResetRoundAsync(Nomencontest.Base.DataTransporter clientData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/ShowRoundCategories")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.SetupTransporter))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.GameStatus))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.ItemDatabaseTransporter))]
        void ShowRoundCategories(Nomencontest.Base.DataTransporter clientData, uint[] categoryIDs);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/ShowRoundCategories")]
        System.Threading.Tasks.Task ShowRoundCategoriesAsync(Nomencontest.Base.DataTransporter clientData, uint[] categoryIDs);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/SelectRoundCategory")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.SetupTransporter))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.GameStatus))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.ItemDatabaseTransporter))]
        void SelectRoundCategory(Nomencontest.Base.DataTransporter clientData, uint categoryID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/SelectRoundCategory")]
        System.Threading.Tasks.Task SelectRoundCategoryAsync(Nomencontest.Base.DataTransporter clientData, uint categoryID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/StartRound")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.SetupTransporter))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.GameStatus))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.ItemDatabaseTransporter))]
        void StartRound(Nomencontest.Base.DataTransporter clientData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/StartRound")]
        System.Threading.Tasks.Task StartRoundAsync(Nomencontest.Base.DataTransporter clientData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/GuessItem")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.SetupTransporter))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.GameStatus))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.ItemDatabaseTransporter))]
        void GuessItem(Nomencontest.Base.DataTransporter clientData, bool isCorrect, bool playSound);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/GuessItem")]
        System.Threading.Tasks.Task GuessItemAsync(Nomencontest.Base.DataTransporter clientData, bool isCorrect, bool playSound);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/OverridePlayerScores")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.SetupTransporter))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.GameStatus))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.ItemDatabaseTransporter))]
        void OverridePlayerScores(Nomencontest.Base.DataTransporter clientData, int player1Score, int player2Score);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/OverridePlayerScores")]
        System.Threading.Tasks.Task OverridePlayerScoresAsync(Nomencontest.Base.DataTransporter clientData, int player1Score, int player2Score);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/FlipRandomCharacter")]
        void FlipRandomCharacter();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/FlipRandomCharacter")]
        System.Threading.Tasks.Task FlipRandomCharacterAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/EndRound")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.SetupTransporter))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.GameStatus))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.ItemDatabaseTransporter))]
        void EndRound(Nomencontest.Base.DataTransporter clientData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/EndRound")]
        System.Threading.Tasks.Task EndRoundAsync(Nomencontest.Base.DataTransporter clientData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/NextRound")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.SetupTransporter))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.GameStatus))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.ItemDatabaseTransporter))]
        void NextRound(Nomencontest.Base.DataTransporter clientData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/NextRound")]
        System.Threading.Tasks.Task NextRoundAsync(Nomencontest.Base.DataTransporter clientData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/FinalRoundToggleNameVisibility")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.SetupTransporter))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.GameStatus))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.ItemDatabaseTransporter))]
        void FinalRoundToggleNameVisibility(Nomencontest.Base.DataTransporter clientData, bool showName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/FinalRoundToggleNameVisibility")]
        System.Threading.Tasks.Task FinalRoundToggleNameVisibilityAsync(Nomencontest.Base.DataTransporter clientData, bool showName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/FinalRoundPlayerGuesses")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.SetupTransporter))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.GameStatus))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.ItemDatabaseTransporter))]
        void FinalRoundPlayerGuesses(Nomencontest.Base.DataTransporter clientData, uint playerID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/FinalRoundPlayerGuesses")]
        System.Threading.Tasks.Task FinalRoundPlayerGuessesAsync(Nomencontest.Base.DataTransporter clientData, uint playerID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/FinalRoundPlayerGuessesDirect")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.SetupTransporter))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.GameStatus))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.ItemDatabaseTransporter))]
        void FinalRoundPlayerGuessesDirect(Nomencontest.Base.DataTransporter clientData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/FinalRoundPlayerGuessesDirect")]
        System.Threading.Tasks.Task FinalRoundPlayerGuessesDirectAsync(Nomencontest.Base.DataTransporter clientData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/StartGame")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.SetupTransporter))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.GameStatus))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.ItemDatabaseTransporter))]
        void StartGame(Nomencontest.Base.DataTransporter clientData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/StartGame")]
        System.Threading.Tasks.Task StartGameAsync(Nomencontest.Base.DataTransporter clientData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/EndGame")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.SetupTransporter))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.GameStatus))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.ItemDatabaseTransporter))]
        void EndGame(Nomencontest.Base.DataTransporter clientData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/EndGame")]
        System.Threading.Tasks.Task EndGameAsync(Nomencontest.Base.DataTransporter clientData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICore/Ping", ReplyAction="http://tempuri.org/ICore/PingResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.SetupTransporter))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.GameStatus))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.ItemDatabaseTransporter))]
        bool Ping(Nomencontest.Base.DataTransporter clientData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICore/Ping", ReplyAction="http://tempuri.org/ICore/PingResponse")]
        System.Threading.Tasks.Task<bool> PingAsync(Nomencontest.Base.DataTransporter clientData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/PlayMusic")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.SetupTransporter))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.GameStatus))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.ItemDatabaseTransporter))]
        void PlayMusic(Nomencontest.Base.DataTransporter clientData, [System.ServiceModel.MessageParameterAttribute(Name="playMusic")] bool playMusic1);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/PlayMusic")]
        System.Threading.Tasks.Task PlayMusicAsync(Nomencontest.Base.DataTransporter clientData, bool playMusic);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICore/GetSettings", ReplyAction="http://tempuri.org/ICore/GetSettingsResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.SetupTransporter))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.GameStatus))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Nomencontest.Base.ItemDatabaseTransporter))]
        void GetSettings(Nomencontest.Base.DataTransporter clientData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICore/GetSettings", ReplyAction="http://tempuri.org/ICore/GetSettingsResponse")]
        System.Threading.Tasks.Task GetSettingsAsync(Nomencontest.Base.DataTransporter clientData);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICoreCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/OnStatusUpdate")]
        void OnStatusUpdate(Nomencontest.Base.GameStatus gameStatus);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/OnSettingsUpdate")]
        void OnSettingsUpdate(Nomencontest.Base.SetupTransporter gameStatus);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/OnItemsUpdate")]
        void OnItemsUpdate(Nomencontest.Base.ItemDatabaseTransporter gameStatus);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/OnGameSetup")]
        void OnGameSetup(Nomencontest.Base.SetupTransporter gameStatus, Nomencontest.Base.GameStatus gameData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/OnClockUpdate")]
        void OnClockUpdate(Nomencontest.Base.ClockTransporter clockValue);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/OnPlayMusic")]
        void OnPlayMusic(bool playMusic);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICore/OnAudioCue")]
        void OnAudioCue(Nomencontest.Base.Models.SoundCue soundcue);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICoreChannel : Nomencontest.Core.Wrapper.Server.ICore, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CoreClient : System.ServiceModel.DuplexClientBase<Nomencontest.Core.Wrapper.Server.ICore>, Nomencontest.Core.Wrapper.Server.ICore {
        
        public CoreClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public CoreClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public CoreClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CoreClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CoreClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public uint RegisterAdministrator(string adminGuid) {
            return base.Channel.RegisterAdministrator(adminGuid);
        }
        
        public System.Threading.Tasks.Task<uint> RegisterAdministratorAsync(string adminGuid) {
            return base.Channel.RegisterAdministratorAsync(adminGuid);
        }
        
        public void UnregisterAdministrator(Nomencontest.Base.DataTransporter clientData) {
            base.Channel.UnregisterAdministrator(clientData);
        }
        
        public System.Threading.Tasks.Task UnregisterAdministratorAsync(Nomencontest.Base.DataTransporter clientData) {
            return base.Channel.UnregisterAdministratorAsync(clientData);
        }
        
        public uint RegisterPlayer(Nomencontest.Base.DataTransporter clientData) {
            return base.Channel.RegisterPlayer(clientData);
        }
        
        public System.Threading.Tasks.Task<uint> RegisterPlayerAsync(Nomencontest.Base.DataTransporter clientData) {
            return base.Channel.RegisterPlayerAsync(clientData);
        }
        
        public void UnregisterPlayer(Nomencontest.Base.DataTransporter clientData) {
            base.Channel.UnregisterPlayer(clientData);
        }
        
        public System.Threading.Tasks.Task UnregisterPlayerAsync(Nomencontest.Base.DataTransporter clientData) {
            return base.Channel.UnregisterPlayerAsync(clientData);
        }
        
        public uint RegisterMainGUI(Nomencontest.Base.DataTransporter clientData, string adminGuid) {
            return base.Channel.RegisterMainGUI(clientData, adminGuid);
        }
        
        public System.Threading.Tasks.Task<uint> RegisterMainGUIAsync(Nomencontest.Base.DataTransporter clientData, string adminGuid) {
            return base.Channel.RegisterMainGUIAsync(clientData, adminGuid);
        }
        
        public void UnregisterMainGUI(Nomencontest.Base.DataTransporter clientData) {
            base.Channel.UnregisterMainGUI(clientData);
        }
        
        public System.Threading.Tasks.Task UnregisterMainGUIAsync(Nomencontest.Base.DataTransporter clientData) {
            return base.Channel.UnregisterMainGUIAsync(clientData);
        }
        
        public uint RegisterObserver(Nomencontest.Base.DataTransporter clientData) {
            return base.Channel.RegisterObserver(clientData);
        }
        
        public System.Threading.Tasks.Task<uint> RegisterObserverAsync(Nomencontest.Base.DataTransporter clientData) {
            return base.Channel.RegisterObserverAsync(clientData);
        }
        
        public void UnregisterObserver(Nomencontest.Base.DataTransporter clientData) {
            base.Channel.UnregisterObserver(clientData);
        }
        
        public System.Threading.Tasks.Task UnregisterObserverAsync(Nomencontest.Base.DataTransporter clientData) {
            return base.Channel.UnregisterObserverAsync(clientData);
        }
        
        public void GetGameData(Nomencontest.Base.DataTransporter clientData) {
            base.Channel.GetGameData(clientData);
        }
        
        public System.Threading.Tasks.Task GetGameDataAsync(Nomencontest.Base.DataTransporter clientData) {
            return base.Channel.GetGameDataAsync(clientData);
        }
        
        public void SetSettings(Nomencontest.Base.SetupTransporter settings) {
            base.Channel.SetSettings(settings);
        }
        
        public System.Threading.Tasks.Task SetSettingsAsync(Nomencontest.Base.SetupTransporter settings) {
            return base.Channel.SetSettingsAsync(settings);
        }
        
        public void AddItemDatabase(Nomencontest.Base.DataTransporter data, byte[] itemFile) {
            base.Channel.AddItemDatabase(data, itemFile);
        }
        
        public System.Threading.Tasks.Task AddItemDatabaseAsync(Nomencontest.Base.DataTransporter data, byte[] itemFile) {
            return base.Channel.AddItemDatabaseAsync(data, itemFile);
        }
        
        public void ClearItemDatabase(Nomencontest.Base.DataTransporter data) {
            base.Channel.ClearItemDatabase(data);
        }
        
        public System.Threading.Tasks.Task ClearItemDatabaseAsync(Nomencontest.Base.DataTransporter data) {
            return base.Channel.ClearItemDatabaseAsync(data);
        }
        
        public void RemoveItem(Nomencontest.Base.DataTransporter data, uint itemID) {
            base.Channel.RemoveItem(data, itemID);
        }
        
        public System.Threading.Tasks.Task RemoveItemAsync(Nomencontest.Base.DataTransporter data, uint itemID) {
            return base.Channel.RemoveItemAsync(data, itemID);
        }
        
        public void GetItems(Nomencontest.Base.DataTransporter data) {
            base.Channel.GetItems(data);
        }
        
        public System.Threading.Tasks.Task GetItemsAsync(Nomencontest.Base.DataTransporter data) {
            return base.Channel.GetItemsAsync(data);
        }
        
        public void ShuffleCategoryItems(Nomencontest.Base.DataTransporter data, uint categoryID) {
            base.Channel.ShuffleCategoryItems(data, categoryID);
        }
        
        public System.Threading.Tasks.Task ShuffleCategoryItemsAsync(Nomencontest.Base.DataTransporter data, uint categoryID) {
            return base.Channel.ShuffleCategoryItemsAsync(data, categoryID);
        }
        
        public void EnableShuffle(Nomencontest.Base.DataTransporter data, bool value) {
            base.Channel.EnableShuffle(data, value);
        }
        
        public System.Threading.Tasks.Task EnableShuffleAsync(Nomencontest.Base.DataTransporter data, bool value) {
            return base.Channel.EnableShuffleAsync(data, value);
        }
        
        public void SetCurrentPlayer(Nomencontest.Base.DataTransporter clientData, uint playerID) {
            base.Channel.SetCurrentPlayer(clientData, playerID);
        }
        
        public System.Threading.Tasks.Task SetCurrentPlayerAsync(Nomencontest.Base.DataTransporter clientData, uint playerID) {
            return base.Channel.SetCurrentPlayerAsync(clientData, playerID);
        }
        
        public void ResetRound(Nomencontest.Base.DataTransporter clientData) {
            base.Channel.ResetRound(clientData);
        }
        
        public System.Threading.Tasks.Task ResetRoundAsync(Nomencontest.Base.DataTransporter clientData) {
            return base.Channel.ResetRoundAsync(clientData);
        }
        
        public void ShowRoundCategories(Nomencontest.Base.DataTransporter clientData, uint[] categoryIDs) {
            base.Channel.ShowRoundCategories(clientData, categoryIDs);
        }
        
        public System.Threading.Tasks.Task ShowRoundCategoriesAsync(Nomencontest.Base.DataTransporter clientData, uint[] categoryIDs) {
            return base.Channel.ShowRoundCategoriesAsync(clientData, categoryIDs);
        }
        
        public void SelectRoundCategory(Nomencontest.Base.DataTransporter clientData, uint categoryID) {
            base.Channel.SelectRoundCategory(clientData, categoryID);
        }
        
        public System.Threading.Tasks.Task SelectRoundCategoryAsync(Nomencontest.Base.DataTransporter clientData, uint categoryID) {
            return base.Channel.SelectRoundCategoryAsync(clientData, categoryID);
        }
        
        public void StartRound(Nomencontest.Base.DataTransporter clientData) {
            base.Channel.StartRound(clientData);
        }
        
        public System.Threading.Tasks.Task StartRoundAsync(Nomencontest.Base.DataTransporter clientData) {
            return base.Channel.StartRoundAsync(clientData);
        }
        
        public void GuessItem(Nomencontest.Base.DataTransporter clientData, bool isCorrect, bool playSound) {
            base.Channel.GuessItem(clientData, isCorrect, playSound);
        }
        
        public System.Threading.Tasks.Task GuessItemAsync(Nomencontest.Base.DataTransporter clientData, bool isCorrect, bool playSound) {
            return base.Channel.GuessItemAsync(clientData, isCorrect, playSound);
        }
        
        public void OverridePlayerScores(Nomencontest.Base.DataTransporter clientData, int player1Score, int player2Score) {
            base.Channel.OverridePlayerScores(clientData, player1Score, player2Score);
        }
        
        public System.Threading.Tasks.Task OverridePlayerScoresAsync(Nomencontest.Base.DataTransporter clientData, int player1Score, int player2Score) {
            return base.Channel.OverridePlayerScoresAsync(clientData, player1Score, player2Score);
        }
        
        public void FlipRandomCharacter() {
            base.Channel.FlipRandomCharacter();
        }
        
        public System.Threading.Tasks.Task FlipRandomCharacterAsync() {
            return base.Channel.FlipRandomCharacterAsync();
        }
        
        public void EndRound(Nomencontest.Base.DataTransporter clientData) {
            base.Channel.EndRound(clientData);
        }
        
        public System.Threading.Tasks.Task EndRoundAsync(Nomencontest.Base.DataTransporter clientData) {
            return base.Channel.EndRoundAsync(clientData);
        }
        
        public void NextRound(Nomencontest.Base.DataTransporter clientData) {
            base.Channel.NextRound(clientData);
        }
        
        public System.Threading.Tasks.Task NextRoundAsync(Nomencontest.Base.DataTransporter clientData) {
            return base.Channel.NextRoundAsync(clientData);
        }
        
        public void FinalRoundToggleNameVisibility(Nomencontest.Base.DataTransporter clientData, bool showName) {
            base.Channel.FinalRoundToggleNameVisibility(clientData, showName);
        }
        
        public System.Threading.Tasks.Task FinalRoundToggleNameVisibilityAsync(Nomencontest.Base.DataTransporter clientData, bool showName) {
            return base.Channel.FinalRoundToggleNameVisibilityAsync(clientData, showName);
        }
        
        public void FinalRoundPlayerGuesses(Nomencontest.Base.DataTransporter clientData, uint playerID) {
            base.Channel.FinalRoundPlayerGuesses(clientData, playerID);
        }
        
        public System.Threading.Tasks.Task FinalRoundPlayerGuessesAsync(Nomencontest.Base.DataTransporter clientData, uint playerID) {
            return base.Channel.FinalRoundPlayerGuessesAsync(clientData, playerID);
        }
        
        public void FinalRoundPlayerGuessesDirect(Nomencontest.Base.DataTransporter clientData) {
            base.Channel.FinalRoundPlayerGuessesDirect(clientData);
        }
        
        public System.Threading.Tasks.Task FinalRoundPlayerGuessesDirectAsync(Nomencontest.Base.DataTransporter clientData) {
            return base.Channel.FinalRoundPlayerGuessesDirectAsync(clientData);
        }
        
        public void StartGame(Nomencontest.Base.DataTransporter clientData) {
            base.Channel.StartGame(clientData);
        }
        
        public System.Threading.Tasks.Task StartGameAsync(Nomencontest.Base.DataTransporter clientData) {
            return base.Channel.StartGameAsync(clientData);
        }
        
        public void EndGame(Nomencontest.Base.DataTransporter clientData) {
            base.Channel.EndGame(clientData);
        }
        
        public System.Threading.Tasks.Task EndGameAsync(Nomencontest.Base.DataTransporter clientData) {
            return base.Channel.EndGameAsync(clientData);
        }
        
        public bool Ping(Nomencontest.Base.DataTransporter clientData) {
            return base.Channel.Ping(clientData);
        }
        
        public System.Threading.Tasks.Task<bool> PingAsync(Nomencontest.Base.DataTransporter clientData) {
            return base.Channel.PingAsync(clientData);
        }
        
        public void PlayMusic(Nomencontest.Base.DataTransporter clientData, bool playMusic1) {
            base.Channel.PlayMusic(clientData, playMusic1);
        }
        
        public System.Threading.Tasks.Task PlayMusicAsync(Nomencontest.Base.DataTransporter clientData, bool playMusic) {
            return base.Channel.PlayMusicAsync(clientData, playMusic);
        }
        
        public void GetSettings(Nomencontest.Base.DataTransporter clientData) {
            base.Channel.GetSettings(clientData);
        }
        
        public System.Threading.Tasks.Task GetSettingsAsync(Nomencontest.Base.DataTransporter clientData) {
            return base.Channel.GetSettingsAsync(clientData);
        }
    }
}
